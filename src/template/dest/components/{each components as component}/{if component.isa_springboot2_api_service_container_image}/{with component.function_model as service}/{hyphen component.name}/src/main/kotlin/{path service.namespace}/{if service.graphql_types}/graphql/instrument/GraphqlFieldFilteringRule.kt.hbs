package {{service.namespace}}.graphql.instrument

import graphql.schema.DataFetcher
import graphql.schema.DataFetcherFactories
import graphql.schema.DataFetchingEnvironment
import graphql.schema.GraphQLObjectType
import org.slf4j.LoggerFactory
import java.util.function.BiFunction

data class GraphqlFieldFilteringRule<T>(
    val type: String,
    val field: String,
    val mapper: BiFunction<DataFetchingEnvironment, T, T>? = null
) {
    fun wrapFetcher(original: DataFetcher<*>, environment: DataFetchingEnvironment): DataFetcher<T> {
        val type = (environment.parentType as? GraphQLObjectType)?.name ?: "??"
        val field = environment.fieldDefinition.name
        return when {
            (this.type != type) -> original as DataFetcher<T>
            (this.field != field) -> original as DataFetcher<T>
            (mapper == null) -> DataFetcher<T> { _ -> null }
            else -> DataFetcherFactories.wrapDataFetcher(
                original, mapper as BiFunction<DataFetchingEnvironment, Any, Any>
            ) as DataFetcher<T>
        }
    }
    companion object {
        val LOG = LoggerFactory.getLogger(GraphqlFieldFilteringRule::class.java)
    }
}
