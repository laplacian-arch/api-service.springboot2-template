{{define 'class_base_name' (upper-camel graphql_field.name) ~}}
{{define 'fetcher_class_name' (concat class_base_name 'FieldFetcher') ~}}
{{define 'arguments_class_name' (concat class_base_name 'FieldArguments') ~}}
{{define 'record_class_name' (upper-camel graphql_type.name) ~}}
{{define 'base_package' (concat service.namespace '.graphql.type_resolver') ~}}
{{define 'graphql_type_package' (concat base_package '.' graphql_type.fqn) ~}}
{{define 'with_self' (not graphql_field.root_field) ~}}
{{define 'filter' fetcher.result_filter ~}}
{{define 'package'  (concat graphql_type_package '.' (lower-snake graphql_field.name)) ~}}
package {{package}}

import org.springframework.stereotype.Component
import graphql.schema.DataFetchingEnvironment
import kotlinx.coroutines.runBlocking
import reactor.core.publisher.Mono
import reactor.kotlin.core.publisher.toMono
import {{service.namespace}}.data_file.DataFileAccess
import {{graphql_type_package}}.*
{{#if (not (eq graphql_type graphql_field.referencing_graphql_type)) ~}}
{{define 'ref_type' graphql_field.referencing_graphql_type ~}}
{{define 'graphql_type_package' (concat service.namespace '.graphql.type_resolver.' ref_type.fqn) ~}}
import {{graphql_type_package}}.*
{{/if}}

/**
 * The fetcher of the {{graphql_field.name}} of the {{graphql_type.name}}.
 */
@Component("{{graphql_field.fqn}}.fetcher")
class {{fetcher_class_name}}(
    val dataFileAccess: DataFileAccess
) {
    /**
     * Fetches the content of the {{graphql_field.name}} field.
     */
    fun fetch(environment: DataFetchingEnvironment): Mono<{{graphql_field.return_type}}> = runBlocking {
            {{graphql_field.record_type}}.from(dataFileAccess.{{lower-camel fetcher.data_file.name}}Data)
        }.toMono()
        {{#if filter ~}}
        .map { result ->
            {{#if (and with_self (contains filter 'self')) ~}}
            val self: {{record_class_name}} = environment.getSource()
            {{/if}}
            {{#if (and graphql_field.arguments (contains filter 'arguments')) ~}}
            val arguments = {{arguments_class_name}}.from(environment.arguments)
            {{/if}}
            {{shift fetcher.result_filter 12}}
        }
        {{/if}}

}
