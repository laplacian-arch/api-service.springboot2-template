{{define "package" (concat service.namespace '.graphql.type') ~}}
package {{package}}
import org.springframework.stereotype.Component
import graphql.schema.idl.RuntimeWiring
import graphql.schema.idl.TypeRuntimeWiring
import graphql.schema.DataFetchingEnvironment

@Component
class QueryResolver(
    {{#each service.graphql_types_backed_by_external_rest_api as |type| ~}}
    {{define "rest_resource_name" (concat type.rest_resource.name '_rest_resource') ~}}
    val {{lower-camel rest_resource_name}}: {{upper-camel rest_resource_name}},
    {{/each}}
) {
    fun registerFetcher(wiring: RuntimeWiring.Builder) = wiring.type(
        TypeRuntimeWiring.newTypeWiring("Query")
        {{#each service.graphql_types as |graphql_type| ~}}
        .dataFetcher("{{lower-camel graphql_type.name}}") { _ -> emptyMap<String, String>()}
        {{/each}}
    )
}
