{{define 'class_base_name' (upper-camel member_type_model.name) ~}}
{{define 'class_name' class_base_name ~}}
{{define 'model' member_type_model ~}}
{{define 'package' (concat service.namespace '.graphql.type_resolver.' (lower-snake graphql_type.group) '.' (lower-snake graphql_type.name)) ~}}
package {{package}}

/**
 * A data class for a {{graphql_type.name}} record.
 */
data class {{class_name}}(
    {{#if model.stored_properties ~}}
    {{#each model.stored_properties as |property| ~}}
    /**
     * {{trim property.description}}
     */
    val {{lower-camel property.name}}: {{property.class_name}}{{if property.nullable '?'}},
    {{/each}}
    {{else ~}}
    val noFields: Boolean = false
    {{/if}}
) {
    companion object {
        /**
         * Creates a {{graphql_type.name}} instance from the given map.
         */
        fun from(record: Map<String, Any?>): {{class_name}} = {{class_name}}(
            {{#if model.stored_properties ~}}
            {{#each model.stored_properties as |property| ~}}
            {{lower-camel property.name}} = record["{{lower-camel property.name}}"] as {{property.class_name}}{{if property.nullable '?'}},
            {{/each}}
            {{else ~}}
            noFields = true
            {{/if}}
        )

        /**
         * Creates a set of {{graphql_type.name}} instances from the given records.
         */
        fun from(records: List<Map<String, Any?>>): List<{{class_name}}> = records.map { from(it) }
    }
}
