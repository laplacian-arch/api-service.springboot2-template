package {{service.namespace}}.configuration

import graphql.ExceptionWhileDataFetching
import graphql.execution.DataFetcherExceptionHandler
import graphql.execution.DataFetcherExceptionHandlerParameters
import graphql.execution.DataFetcherExceptionHandlerResult
import org.slf4j.LoggerFactory

class GraphqlExceptionHandler: DataFetcherExceptionHandler  {
    override fun onException(
        handlerParameters: DataFetcherExceptionHandlerParameters
    ): DataFetcherExceptionHandlerResult? {

        val exception = handlerParameters.exception
        val sourceLocation = handlerParameters.sourceLocation
        val path = handlerParameters.path
        val error = ExceptionWhileDataFetching(path, exception, sourceLocation)
        LOG.error(error.message, exception)
        return DataFetcherExceptionHandlerResult.newResult().error(error).build()
    }

    companion object {
        val LOG = LoggerFactory.getLogger(GraphqlExceptionHandler::class.java)
    }
}
