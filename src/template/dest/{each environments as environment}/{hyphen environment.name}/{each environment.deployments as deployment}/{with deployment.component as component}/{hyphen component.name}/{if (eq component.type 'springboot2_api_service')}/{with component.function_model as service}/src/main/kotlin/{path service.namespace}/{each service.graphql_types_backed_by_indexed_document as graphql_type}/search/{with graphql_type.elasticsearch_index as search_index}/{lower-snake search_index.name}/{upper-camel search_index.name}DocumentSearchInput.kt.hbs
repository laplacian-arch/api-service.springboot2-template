{{define "class_base_name" (upper-camel search_index.name) ~}}
{{define 'class_name' (concat class_base_name 'DocumentSearchInput') ~}}
{{define 'index_fields' search_index.document_model.stored_properties ~}}
package {{service.namespace}}.search.{{lower-snake search_index.name}}

import {{service.namespace}}.query.*
import {{service.namespace}}.util.*
import java.time.*

data class {{class_name}} (
    {{#each index_fields as |property| ~}}
    {{define 'type_and_initializer' (case
      (eq property.type 'number') 'IntSearchInput = IntSearchInput()'
      (eq property.type 'boolean') 'BooleanSearchInput = BooleanSearchInput()'
      (eq property.type 'string') 'String = ""'
      'LocalDate? = null'
    ) ~}}
    val {{lower-camel property.name}}: {{type_and_initializer}},
    {{/each}}
) {
    fun isEmpty(): Boolean =
        {{#each index_fields as |property| ~}}
        {{#if (eq property.type 'date') ~}}
        {{lower-camel property.name}} == null{{if (not @last) ' &&'}}
        {{else}}
        {{lower-camel property.name}}.isEmpty(){{if (not @last) ' &&'}}
        {{/if}}
        {{/each}}

    companion object {
        fun from(args: Map<String, Any?>): {{class_name}} {
            return {{class_name}}(
                {{#each index_fields as |property| ~}}
                {{define 'prop_name' (lower-camel property.name) ~}}
                {{define 'prop_type' (lower-camel property.type) ~}}
                {{#if (eq prop_type 'string') ~}}
                {{prop_name}} = args["{{prop_name}}"] as? String ?: "",
                {{else if (eq prop_type 'number') ~}}
                {{prop_name}} = IntSearchInput.from(args["{{prop_name}}"]),
                {{else if (eq prop_type 'boolean') ~}}
                {{prop_name}} = BooleanSearchInput.from(args["{{prop_name}}"]),
                {{else if (eq prop_type 'date') ~}}
                {{prop_name}} = args["{{prop_name}}"] as? LocalDate,
                {{else}}
                {{prop_name}} = args["{{prop_name}}"],
                {{/if}}
                {{/each}}
            )
        }
    }
}