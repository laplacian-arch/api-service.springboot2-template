{{define "package" (concat service.namespace '.query') ~}}
package {{package}}
{{#each service.entities_backing_graphql_type as |entity| ~}}
{{define "base_package" (concat entity.namespace '.entity.' (lower-snake entity.name)) ~}}
import {{base_package}}.{{entity.class_name}}Entity
import {{base_package}}.{{entity.class_name}}Repository
import {{base_package}}.{{entity.class_name}}SearchInput
{{/each}}
{{#each service.rest_resources_backing_graphql_type as |rest_resource| ~}}
import {{concat service.namespace '.rpc.rest.' (lower-snake rest_resource.name) '.*' }}
{{/each}}

import org.springframework.stereotype.Component
import graphql.schema.idl.RuntimeWiring
import graphql.schema.idl.TypeRuntimeWiring
import graphql.schema.DataFetchingEnvironment
import java.util.concurrent.CompletableFuture

@Component
class QueryResolver(
    {{#each service.entities_backing_graphql_type as |entity|~}}
    val {{lower-camel entity.name}}Repository: {{upper-camel entity.name}}Repository,
    {{/each}}
    {{#each service.graphql_types_backed_by_external_rest_api as |type| ~}}
    {{define "rest_resource_name" (concat type.rest_resource.name '_rest_resource') ~}}
    val {{lower-camel rest_resource_name}}: {{upper-camel rest_resource_name}},
    {{/each}}
) {
    {{#each service.entities_backing_graphql_type as |top_level| ~}}

    {{define "entity_class_name" (concat (upper-camel top_level.name) 'Entity') ~}}
    fun {{lower-camel top_level.name}}(context: DataFetchingEnvironment): CompletableFuture<{{entity_class_name}}> =
        context
        .getDataLoader<{{entity_class_name}}, {{entity_class_name}}>({{concat (upper-snake top_level.name) '_BY_PK'}})
        .load({{entity_class_name}}().apply {
            {{#each (filter top_level.properties '@it.primary_key') as |pk| ~}}
            this.{{lower-camel pk.name}} = context.getArgument("{{lower-camel pk.name}}")
            {{/each}}
        })

    fun {{lower-camel (plural top_level.name)}}(context: DataFetchingEnvironment): CompletableFuture<List<{{entity_class_name}}>> =
        {{lower-camel top_level.name}}Repository
        .find{{upper-camel (plural top_level.name)}}({{upper-camel top_level.name}}SearchInput.from(context.arguments))
        .thenApply{ it.toList() }

    fun numberOf{{upper-camel (plural top_level.name)}}(context: DataFetchingEnvironment): CompletableFuture<Long> =
        {{lower-camel top_level.name}}Repository
        .count{{upper-camel (plural top_level.name)}}({{upper-camel top_level.name}}SearchInput.from(context.arguments))
    {{/each}}

    {{#each service.graphql_types_backed_by_external_rest_api as |type| ~}}
    {{define "rest_resource" type.rest_resource ~}}
    {{define "operation" type.rest_operation ~}}
    fun {{lower-camel operation.name}}(context: DataFetchingEnvironment): CompletableFuture<{{upper-camel operation.name}}Response> =
        {{lower-camel rest_resource.name}}RestResource
        .{{lower-camel operation.name}}({{upper-camel operation.name}}Request(
            {{#each operation.path_parameters as |param| ~}}
            {{lower-camel param.name}} = context.getArgument("{{lower-camel param.name}}"),
            {{/each}}
        ))
    {{/each}}

    fun registerFetcher(wiring: RuntimeWiring.Builder) = wiring.type(
        TypeRuntimeWiring.newTypeWiring("Query")
        {{#each service.entities_backing_graphql_type as |top_level| ~}}
        {{define 'plural_name' (lower-camel (plural top_level.name)) ~}}
        {{define 'singular_name' (lower-camel top_level.name) ~}}
        .dataFetcher("{{plural_name}}") { env -> {{plural_name}}(env) }
        .dataFetcher("numberOf{{upper-camel plural_name}}") { env -> numberOf{{upper-camel plural_name}}(env) }
        .dataFetcher("{{singular_name}}") { env -> {{singular_name}}(env)}
        {{/each}}
        {{#each service.graphql_types_backed_by_external_rest_api as |type| ~}}
        .dataFetcher("{{lower-camel type.name}}") { env -> {{lower-camel type.rest_operation.name}}(env)}
        {{/each}}
    )

    companion object {
        {{#each service.entities_backing_graphql_type as |top_level| ~}}
        const val {{concat (upper-snake top_level.name) '_BY_PK'}} = "{{lower-camel top_level.name}}_byPK"
        {{/each}}
    }
}
