{{define "base_package" (concat service.namespace '.rpc.rest') ~}}
{{define "package" (concat base_package '.' (lower-snake rest_resource.name)) ~}}
package {{package}}

import org.springframework.stereotype.Component
import org.springframework.web.reactive.function.client.WebClient
import org.springframework.web.reactive.function.client.ExchangeStrategies
import org.springframework.web.util.UriBuilder
import org.springframework.beans.factory.annotation.Value
import org.springframework.http.HttpHeaders
import org.springframework.http.MediaType
import org.springframework.http.HttpMethod
import java.util.concurrent.CompletableFuture
import java.util.concurrent.Future
import java.nio.charset.Charset
import com.fasterxml.jackson.module.kotlin.*

import {{base_package}}.RestResourceClientBase
{{#each rest_resource.operations as |operation| ~}}
import {{package}}.{{lower-snake operation.name}}.*
{{/each}}

@Component
class {{upper-camel rest_resource.name}}RestResourceClient(
    {{#each rest_resource.configurations as |config| ~}}
    @Value("{{concat '\${' config.definition.key '}'}}")
    private val {{config.variable_name}}: {{upper-camel config.definition.type}},
    {{/each}}
): RestResourceClientBase(), {{upper-camel rest_resource.name}}RestResource {
    {{#each rest_resource.operations as |operation| ~}}

    /**
     * {{trim operation.description}}
     */
    override fun {{lower-camel operation.name}}(
        input: {{upper-camel operation.name}}Input
    ): CompletableFuture<{{upper-camel operation.name}}Response> {
        {{#each operation.arguments as |argument| ~}}
        val {{lower-camel argument.name}} = input.{{lower-camel argument.name}}
        {{/each}}
        return client({{dquote rest_resource.base_url}})
        .method(HttpMethod.{{upper-snake operation.method}})
        .uri { it
            .path({{dquote operation.path}})
            {{#each operation.query_parameters as |parameter| ~}}
            .let { {{if parameter.multiple 'queryParams' 'queryParam'}}(it, {{dquote parameter.name}}, {{dquote parameter.value}}) }
            {{/each}}
            .build(mapOf(
                {{#each operation.path_parameters as |param| ~}}
                "{{lower-camel param.name}}" to {{dquote param.value}},
                {{/each}}
            ))
        }
        .let { commonRequestSettings(it) }
        {{#each operation.http_headers as |header| ~}}
        .header("{{header.name}}", {{dquote header.value}})
        {{/each}}
        .retrieve()
        .bodyToMono({{upper-camel operation.name}}Response::class.java)
        .toFuture()
    }
    {{/each}}
    val commonRequestSettings = {req: WebClient.RequestBodySpec ->
        req
        .accept(MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML)
        .acceptCharset(Charset.forName("UTF-8"))
    }
}