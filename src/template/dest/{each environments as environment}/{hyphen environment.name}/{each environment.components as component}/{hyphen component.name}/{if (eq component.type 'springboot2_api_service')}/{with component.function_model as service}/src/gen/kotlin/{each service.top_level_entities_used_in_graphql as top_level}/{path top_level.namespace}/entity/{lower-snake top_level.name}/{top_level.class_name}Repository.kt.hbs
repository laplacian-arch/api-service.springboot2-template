{{define "repository_class_name" (concat (upper-camel top_level.name) 'Repository') ~}}
{{define "package" (concat top_level.namespace '.entity.' (lower-snake top_level.name)) ~}}
package {{package}}
import java.util.concurrent.CompletableFuture
{{#each top_level.relating_top_level_entities as |other| ~}}
import {{other.namespace}}.entity.{{lower-snake other.name}}.{{upper-camel other.name}}Entity
import {{other.namespace}}.entity.{{lower-snake other.name}}.{{upper-camel other.name}}SearchInput
{{/each}}

typealias Records = List<Record>
typealias Record = Map<String, Any?>

/**
 * The interface which abstracts the details of the data access concerning {{plural top_level.name}}.
 */
interface {{repository_class_name}} {
{{#*inline "METHOD_DEFINITION_FOR_AN_ENTITY" ~}}
    {{define "plural_name" (plural entity.name) ~}}
    {{define "entity_class_name" (concat entity.class_name 'Entity') ~}}
    {{define "search_input_class_name" (concat entity.class_name 'SearchInput') ~}}
    {{define "entity_set" (printf 'Set<%s>' entity_class_name) ~}}
    {{define "loader_method_name" (concat 'load' (upper-camel plural_name)) ~}}
    {{define "finder_method_name" (concat 'find' (upper-camel plural_name)) ~}}
    {{define "counter_method_name" (concat 'count' (upper-camel plural_name)) ~}}
    {{define "fqn" entity.fqn ~}}
    {{#each data_accesses as |data_access| ~}}
    {{#if (eq data_access.entity.fqn fqn) ~}}
    {{define "method_name" (lower-camel data_access.name) ~}}
    /**
     * {{trim data_access.description}}
     */
    fun {{method_name}}(): CompletableFuture<{{data_access.type}}>
    {{/if}}
    {{/each}}

    /**
     * Finds {{plural_name}} which matches the given conditions.
     */
    fun {{finder_method_name}}(input: {{search_input_class_name}} = {{search_input_class_name}}()): CompletableFuture<{{entity_set}}>

    /**
     * Counts the number of {{plural_name}} which matches the given conditions.
     */
    fun {{counter_method_name}}(input: {{search_input_class_name}} = {{search_input_class_name}}()): CompletableFuture<Long>

    /**
     * Loads {{plural_name}} having given primary keys.
     */
    fun {{loader_method_name}}(keys: {{entity_set}}): CompletableFuture<{{entity_set}}>

    {{#each entity.stored_relationships as |r| ~}}
    {{define "reference_entity_name" (upper-camel r.reference_entity.name) ~}}
    {{define "reference_entity_class_name" (concat reference_entity_name 'Entity') ~}}
    {{define "result_type" (if r.multiple
        (concat 'List<' reference_entity_class_name '>')
        (concat reference_entity_class_name (if r.nullable '?' ''))
    ) ~}}
    {{define "loader_method_name" (concat 'load' (upper-camel r.name) 'Of' (upper-camel entity.name)) ~}}
    /**
     * Loads {{r.name}}
     */
    fun {{loader_method_name}}(inputs: Map<{{reference_entity_name}}SearchInput, Set<{{entity_class_name}}>>): CompletableFuture<Map<Pair<{{reference_entity_name}}SearchInput, {{entity_class_name}}>, {{result_type}}>>
    {{/each}}
{{/inline}}
    {{#each top_level.aggregated_entities as |entity| ~}}
    {{> METHOD_DEFINITION_FOR_AN_ENTITY entity=entity ~}}
    {{/each}}
}
