package {{service.namespace}}.configuration

import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.context.ApplicationContext
import org.springframework.util.StreamUtils
import org.springframework.web.reactive.function.server.router
import org.springframework.web.reactive.function.server.ServerRequest
import graphql.schema.GraphQLSchema
import graphql.GraphQL
import graphql.schema.idl.SchemaParser
import graphql.schema.idl.SchemaGenerator
import org.dataloader.DataLoader;
import org.dataloader.DataLoaderRegistry;
import {{service.namespace}}.query.QueryResolver
{{#each service.top_level_entities_used_in_graphql as |top_level| ~}}
{{define "entity_package" (concat
    top_level.namespace '.entity.' (lower-underscore top_level.identifier
)) ~}}
import {{entity_package}}.{{top_level.class_name}}Resolver
{{~#if top_level.aggregates}}
{{#each top_level.aggregates as |aggregate| ~}}
import {{entity_package}}.{{aggregate.reference_entity.class_name}}Resolver
{{/each}}
{{/if}}
{{/each}}
import java.nio.charset.StandardCharsets
import graphql.schema.idl.RuntimeWiring

@Configuration
class GraphqlConfig {

    @Bean
    fun graphql(
        schema: GraphQLSchema
    ): GraphQL = GraphQL.newGraphQL(schema).build()

    @Bean
    fun buildSchema(
        context: ApplicationContext,
        runtimeWiring: RuntimeWiring
    ): GraphQLSchema {
        val parser = SchemaParser()
        val schema = context
            .getResources("classpath*:/laplacian/**/*.graphql")
            .map {
                StreamUtils.copyToString(it.inputStream, StandardCharsets.UTF_8)
            }
            .joinToString("\n")
        val typeRegistry = parser.parse(schema)
        return SchemaGenerator().makeExecutableSchema(typeRegistry, runtimeWiring)
    }

    @Bean
    fun buildRuntimeWiring(
        {{#each service.entities_used_in_graphql as |entity| ~}}
        {{lower-camel entity.name}}Resolver: {{upper-camel entity.name}}Resolver,
        {{/each}}
        queryResolver: QueryResolver
    ): RuntimeWiring = RuntimeWiring.newRuntimeWiring().also {
        {{#each service.entities_used_in_graphql as |entity| ~}}
        {{lower-camel entity.name}}Resolver.registerFetcher(it)
        {{/each}}
        queryResolver.registerFetcher(it)
    }.build()

    @Bean
    fun buildDataLoaderRegistry(
        {{#each service.entities_used_in_graphql as |entity| ~}}
        {{lower-camel entity.name}}Resolver: {{upper-camel entity.name}}Resolver{{#unless @last}},{{/unless}}
        {{/each}}
    ): DataLoaderRegistry = DataLoaderRegistry().also {
        {{#each service.entities_used_in_graphql as |entity| ~}}
        {{lower-camel entity.name}}Resolver.registerLoader(it)
        {{/each}}
    }
}