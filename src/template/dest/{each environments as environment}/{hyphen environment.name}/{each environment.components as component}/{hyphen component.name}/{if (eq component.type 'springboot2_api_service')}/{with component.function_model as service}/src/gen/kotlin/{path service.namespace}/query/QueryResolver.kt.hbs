{{#define "package"}}{{service.namespace}}.query{{/define}}
package {{package}}

{{#each service.top_level_entities_used_in_graphql as |top_level| ~}}
{{define "base_package" (concat top_level.namespace '.entity.' (lower-snake top_level.name)) ~}}
import {{base_package}}.{{top_level.class_name}}Entity
import {{base_package}}.{{top_level.class_name}}Repository
import {{base_package}}.{{top_level.class_name}}SearchInput
{{/each}}
import org.springframework.stereotype.Component
import graphql.schema.idl.RuntimeWiring
import graphql.schema.idl.TypeRuntimeWiring
import graphql.schema.DataFetchingEnvironment
import java.util.concurrent.CompletableFuture

@Component
class QueryResolver(
    {{#each service.top_level_entities_used_in_graphql as |top_level|~}}
    val {{lower-camel top_level.name}}Repository: {{upper-camel top_level.name}}Repository{{#unless @last}},{{/unless}}
    {{/each}}
) {
    {{#each service.top_level_entities_used_in_graphql as |top_level| ~}}

    {{define "entity_class_name" (concat (upper-camel top_level.name) 'Entity') ~}}
    fun {{lower-camel top_level.name}}(context: DataFetchingEnvironment): CompletableFuture<{{entity_class_name}}> =
        context
        .getDataLoader<{{entity_class_name}}, {{entity_class_name}}>({{concat (upper-snake top_level.name) '_BY_PK'}})
        .load({{entity_class_name}}().apply {
            {{#each (filter top_level.properties '@it.primary_key') as |pk| ~}}
            this.{{lower-camel pk.name}} = context.getArgument("{{lower-camel pk.name}}")
            {{/each}}
        })

    fun {{lower-camel (plural top_level.name)}}(context: DataFetchingEnvironment): CompletableFuture<List<{{entity_class_name}}>> =
        {{lower-camel top_level.name}}Repository
        .find{{upper-camel (plural top_level.name)}}({{upper-camel top_level.name}}SearchInput.from(context.arguments))
        .thenApply{ it.toList() }

    fun numberOf{{upper-camel (plural top_level.name)}}(context: DataFetchingEnvironment): CompletableFuture<Long> =
        {{lower-camel top_level.name}}Repository
        .count{{upper-camel (plural top_level.name)}}({{upper-camel top_level.name}}SearchInput.from(context.arguments))
    {{/each}}

    fun registerFetcher(wiring: RuntimeWiring.Builder) = wiring.type(
        TypeRuntimeWiring.newTypeWiring("Query")
        {{#each service.top_level_entities_used_in_graphql as |top_level| ~}}
        {{define 'plural_name' (lower-camel (plural top_level.name)) ~}}
        {{define 'singular_name' (lower-camel top_level.name) ~}}
        .dataFetcher("{{plural_name}}") { env -> {{plural_name}}(env) }
        .dataFetcher("numberOf{{upper-camel plural_name}}") { env -> numberOf{{upper-camel plural_name}}(env) }
        .dataFetcher("{{singular_name}}") { env -> {{singular_name}}(env)}
        {{/each}}
    )

    companion object {
        {{#each service.top_level_entities_used_in_graphql as |top_level| ~}}
        const val {{concat (upper-snake top_level.name) '_BY_PK'}} = "{{lower-camel top_level.name}}_byPK"
        {{/each}}
    }
}
