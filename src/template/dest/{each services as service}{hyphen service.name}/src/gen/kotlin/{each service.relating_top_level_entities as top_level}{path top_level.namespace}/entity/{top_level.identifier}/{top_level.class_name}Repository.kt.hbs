{{define "repository_class_name" (concat (upper-camel top_level.name) 'Repository') ~}}
{{define "package" (concat top_level.namespace '.entity.' (lower-snake top_level.name)) ~}}
package {{package}}
import java.util.concurrent.CompletableFuture

typealias Records = List<Record>
typealias Record = Map<String, Any?>

/**
 * The interface which abstracts the details of the data access concerning {{plural top_level.name}}.
 */
interface {{repository_class_name}} {
{{#*inline "METHOD_DEFINITION_FOR_AN_ENTITY" ~}}
    {{define "plural_name" (plural entity.name) ~}}
    {{define "entity_class_name" (concat entity.class_name 'Entity') ~}}
    {{define "entity_set" (printf 'Set<%s>' entity_class_name) ~}}
    {{define "loader_method_name" (concat 'load' (upper-camel plural_name)) ~}}
    {{define "fqn" entity.fqn ~}}
    {{#each data_accesses as |data_access| ~}}
    {{#if (eq data_access.entity.fqn fqn) ~}}
    {{define "method_name" (lower-camel data_access.name) ~}}
    /**
     * {{trim data_access.description}}
     */
    fun {{method_name}}(): CompletableFuture<{{data_access.type}}>
    {{/if}}
    {{/each}}

    /**
     * Loads all {{plural_name}}.
     */
    fun {{loader_method_name}}(): CompletableFuture<{{entity_set}}>

    /**
     * Loads {{plural_name}} having given primary keys.
     */
    fun {{loader_method_name}}(keys: {{entity_set}}): CompletableFuture<{{entity_set}}>
    {{#each entity.stored_relationships as |r| ~}}
    {{#if r.multiple ~}}
    {{define "reference_entity_class_name" (concat (upper-camel r.reference_entity.name) 'Entity') ~}}
    {{define "loader_method_name" (concat 'load' (upper-camel r.name) 'Of' (upper-camel entity.name)) ~}}
    /**
     * Loads {{r.name}}
     */
    fun {{loader_method_name}}(keys: Set<{{entity_class_name}}>): CompletableFuture<Map<{{entity_class_name}}, List<{{reference_entity_class_name}}>>>
    {{/if}}
    {{/each}}
{{/inline}}
    {{#each top_level.aggregated_entities as |entity| ~}}
    {{> METHOD_DEFINITION_FOR_AN_ENTITY entity=entity ~}}
    {{/each}}
}
