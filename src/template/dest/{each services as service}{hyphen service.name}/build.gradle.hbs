plugins {
  id "org.jetbrains.kotlin.jvm" version "1.3.70"
  id "org.jetbrains.kotlin.plugin.spring" version "1.3.70"
  id "org.springframework.boot" version "2.2.6.RELEASE"
  id "io.spring.dependency-management" version "1.0.9.RELEASE"
  id "nu.studer.jooq" version "4.2"
}

group = "{{project.name}}"
version = "{{service.version}}"

defaultTasks 'bootJar'

dependencies {
  implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
  implementation 'org.jetbrains.kotlin:kotlin-reflect'
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.5'
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.3.5'
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
  implementation 'org.springframework.boot:spring-boot-starter-jooq'
  implementation 'com.graphql-java-kickstart:graphql-spring-boot-starter:7.0.1'
  implementation 'com.graphql-java-kickstart:altair-spring-boot-starter:7.0.1'
  implementation 'org.jooq:jooq'

  runtimeOnly 'org.postgresql:postgresql:42.2.12'

  testImplementation 'org.jetbrains.kotlin:kotlin-test'
  testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
  testImplementation 'com.graphql-java-kickstart:graphql-spring-boot-starter-test:7.0.1'

  jooqRuntime 'org.postgresql:postgresql'
}

repositories {
  jcenter()
}

bootRun {
  jvmArgs = [
    "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5060",
  ]
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
  kotlinOptions {
    freeCompilerArgs = [ '-Xjsr305=strict' ]
    jvmTarget = '11'
  }
}

sourceSets {
  main.java.srcDirs += ["src/gen/java", "src/gen/kotlin"]
  main.resources.srcDirs += ["src/gen/resources"]
  test.java.srcDirs += ["src/gen/java", "src/gen/kotlin"]
  test.resources.srcDirs += ["src/gen/resources"]
}

{{define 'datasource' service.datasource ~}}
{{define 'jdbc_url' (replace datasource.jdbc_url datasource.hostname 'localhost') ~}}
jooq {
  version = '3.13.1'
  edition = 'OSS'
  generateSchemaSourceOnCompilation = false
  {{lower-camel datasource.name}}(sourceSets.main) {
    jdbc {
      url = "{{jdbc_url}}"
      user = "{{datasource.db_user}}"
      password = "{{datasource.db_password}}"
    }
    generator {
      name = 'org.jooq.codegen.DefaultGenerator'
      database {
        name = 'org.jooq.meta.postgres.PostgresDatabase'
        inputSchema = 'public'
        includes = '.*'
        excludes = ''
      }
      target {
        packageName = '{{service.namespace}}.entity.db'
        directory = 'src/gen/java'
      }
    }
  }
}
