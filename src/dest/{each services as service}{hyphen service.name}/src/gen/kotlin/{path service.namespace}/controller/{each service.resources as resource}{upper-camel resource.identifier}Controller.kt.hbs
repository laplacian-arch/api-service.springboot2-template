{{#*inline "OPERATION_REQUEST_CLASS"}}{{upper-camel operation.identifier}}RequestPayload{{/inline}}
{{#*inline "OPERATION_RESPONSE_CLASS"}}{{upper-camel operation.identifier}}ResponsePayload{{/inline}}
{{#*inline "OPERATION_METHOD_NAME"}}{{lower-camel operation.identifier}}{{/inline}}
{{#*inline "RESOURCE_CLASS_NAME"}}{{upper-camel resource.identifier}}Resource{{/inline}}
{{#*inline "RESOURCE_OBJECT_NAME"}}{{lower-camel resource.identifier}}Resource{{/inline}}

package {{service.namespace}}.controller
import reactor.core.publisher.Mono
import org.springframework.web.bind.annotation.*
import {{resource.namespace}}.{{> RESOURCE_CLASS_NAME}}
{{#each resource.operations as |operation| ~}}
import {{operation.namespace}}.{{> OPERATION_REQUEST_CLASS}}
import {{operation.namespace}}.{{> OPERATION_RESPONSE_CLASS}}
{{/each}}

/**
 * The rest controller of the {{resource.name}} resource.
 */
@CrossOrigin
@RestController
class {{upper-camel resource.identifier}}Controller (
    val {{> RESOURCE_OBJECT_NAME}}: {{> RESOURCE_CLASS_NAME}}
) {
    {{#each resource.operations as |operation| ~}}
    @RequestMapping(
        path = [ "{{service.path}}/{{service.api_version}}{{resource.path}}{{operation.path}}" ],
        method = [ RequestMethod.{{operation.method}} ]
    )
    /**
     * {{trim operation.description}}
     */
    fun {{> OPERATION_METHOD_NAME}}(
        request: Mono<{{> OPERATION_REQUEST_CLASS}}>
    ): Mono<{{> OPERATION_RESPONSE_CLASS}}> {
        return {{> RESOURCE_OBJECT_NAME}}.{{> OPERATION_METHOD_NAME}}(request)
    }
    {{/each}}
}
