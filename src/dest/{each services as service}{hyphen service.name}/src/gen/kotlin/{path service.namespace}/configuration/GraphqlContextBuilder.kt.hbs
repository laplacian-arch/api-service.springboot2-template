package {{service.namespace}}.configuration

import graphql.kickstart.servlet.context.GraphQLServletContextBuilder;
import org.springframework.stereotype.Component;
import javax.websocket.Session;
import javax.websocket.server.HandshakeRequest;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import graphql.kickstart.execution.context.DefaultGraphQLContext;
import graphql.kickstart.execution.context.GraphQLContext;
import graphql.kickstart.servlet.context.DefaultGraphQLServletContext;
import graphql.kickstart.servlet.context.DefaultGraphQLWebSocketContext;
import org.dataloader.DataLoader;
import org.dataloader.DataLoaderRegistry;

{{#each service.relating_top_level_entities as |top_level| ~}}
{{#define "entity_package"}}{{top_level.namespace}}.entity.{{lower-underscore top_level.identifier}}{{/define}}
import {{entity_package}}.{{top_level.class_name}}Resolver
{{#each top_level.aggregates as |aggregate| ~}}
import {{entity_package}}.{{aggregate.reference_entity.class_name}}Resolver
{{/each}}
{{/each}}

@Component
class GraphQLContextBuilder(
    {{#each service.relating_entities as |e| ~}}
    private val {{lower-camel e.identifier}}Resolver: {{e.class_name}}Resolver{{#unless @last}},{{/unless}}
    {{/each}}
): GraphQLServletContextBuilder {

    override fun build(request: HttpServletRequest, response: HttpServletResponse): GraphQLContext =
        DefaultGraphQLServletContext
        .createServletContext(buildDataLoaderRegistry(), null)
        .with(request)
        .with(response)
        .build();

    override fun build(): GraphQLContext =
        DefaultGraphQLContext(buildDataLoaderRegistry(), null);

    override fun build(session: Session, request: HandshakeRequest): GraphQLContext =
        DefaultGraphQLWebSocketContext
        .createWebSocketContext(buildDataLoaderRegistry(), null)
        .with(session)
        .with(request)
        .build();

    private fun buildDataLoaderRegistry(): DataLoaderRegistry = DataLoaderRegistry().also {
        {{#each service.relating_top_level_entities as |top_level| ~}}
        {{lower-camel top_level.identifier}}Resolver.registerLoader(it)
        {{#each top_level.aggregates as |aggregate| ~}}
        {{lower-camel aggregate.reference_entity.identifier}}Resolver.registerLoader(it)
        {{/each}}
        {{/each}}
    }
}