import nu.studer.gradle.jooq.JooqConfiguration
import nu.studer.gradle.jooq.JooqTask
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.jooq.meta.jaxb.*
import org.jooq.meta.jaxb.Target
import org.springframework.boot.gradle.tasks.run.BootRun


group = "{{project.name}}"
version = "{{service.version}}"

val jooqVersion: String by project
val jooqSchemaPackage: String by project

plugins {
    val kotlinVersion = "1.3.70"
    val springbootVersion = "2.2.6.RELEASE"
    kotlin("jvm") version kotlinVersion
    id("org.jetbrains.kotlin.plugin.spring") version kotlinVersion
    id("org.springframework.boot") version springbootVersion
    id("nu.studer.jooq") version "4.2"
}
apply(plugin = "io.spring.dependency-management")

repositories {
  jcenter()
}

dependencies {
    val kotlinCoroutineVersion = "1.3.5"

    implementation(kotlin("stdlib-jdk8"))
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutineVersion")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinCoroutineVersion")
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-jooq")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("com.graphql-java-kickstart:graphql-java-tools:5.3.5")
	implementation("com.graphql-java:graphql-java:11.0")
    implementation("com.graphql-java:java-dataloader:2.2.1")
    implementation("org.springframework.boot:spring-boot-devtools")
    implementation("org.postgresql:postgresql:42.2.5")
    implementation("org.jooq:jooq:$jooqVersion")

    testImplementation("junit:junit")
    testImplementation("org.springframework.boot:spring-boot-starter-test")

    jooqRuntime("org.postgresql:postgresql")
    jooqRuntime("org.jooq:jooq:$jooqVersion")
    jooqRuntime("org.jooq:jooq-meta:$jooqVersion")
    jooqRuntime("org.jooq:jooq-codegen:$jooqVersion")
}

tasks {
    withType<KotlinCompile> {
        kotlinOptions.jvmTarget = "1.8"
    }
    withType<BootRun> {
        jvmArgs = listOf(
            "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"
        )
    }
}

sourceSets {
    listOf("main", "test").onEach {
        getByName(it).apply {
            java.srcDirs("src/gen/java", "src/gen/kotlin")
            resources.srcDirs("src/gen/resources")
        }
    }
}
{{define "datasource" service.datasource}}
val generateJooqDsl by tasks.creating(JooqTask::class.java) {
    jooqClasspath = project.configurations.getByName("jooqRuntime")
    configuration = Configuration().apply {
        jdbc = Jdbc().apply {
            url = "{{datasource.jdbc_url}}"
            user = "{{datasource.user}}"
            password = "{{datasource.password}}"
        }
        generator = Generator().apply {
            name = "org.jooq.codegen.DefaultGenerator"
            database = Database().apply {
                name = "org.jooq.meta.postgres.PostgresDatabase"
                inputSchema = "public"
                includes = ".*"
                excludes = ""
            }
            target = Target().apply {
                packageName = jooqSchemaPackage
                directory = "src/gen/java"
            }
        }
    }
}
