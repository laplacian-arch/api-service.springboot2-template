{{#*inline "RESOURCE_CLASS_NAME"}}{{upper-camel resource.identifier}}Resource{{/inline}}
{{#*inline "LOGIC_CLASS_NAME"}}{{upper-camel operation.identifier}}Logic{{/inline}}
{{#*inline "LOGIC_MEMBER_NAME"}}{{lower-camel operation.identifier}}Logic{{/inline}}
{{#*inline "REQUEST_CLASS_NAME"}}{{upper-camel operation.identifier}}RequestPayload{{/inline}}
{{#*inline "RESPONSE_CLASS_NAME"}}{{upper-camel operation.identifier}}ResponsePayload{{/inline}}

package {{resource.namespace}}

import org.springframework.stereotype.Component
import reactor.core.publisher.Mono
{{#each resource.operations as |operation|}}
import {{operation.namespace}}.{{> LOGIC_CLASS_NAME}}
import {{operation.namespace}}.{{> REQUEST_CLASS_NAME}}
import {{operation.namespace}}.{{> RESPONSE_CLASS_NAME}}
{{/each}}

/**
 * {{trim resource.description}}
 */
@Component
class {{> RESOURCE_CLASS_NAME}}Base (
{{#each resource.operations as |operation|}}
    val {{> LOGIC_MEMBER_NAME}}: {{> LOGIC_CLASS_NAME}}{{#unless @last}},{{/unless}}
{{/each}}
): {{> RESOURCE_CLASS_NAME}} {
    {{#each resource.operations as |operation|}}
    /**
     * {{trim operation.description}}
     */
    override fun {{lower-camel operation.identifier}}(request: Mono<{{> REQUEST_CLASS_NAME}}>): Mono<{{> RESPONSE_CLASS_NAME}}> {
        return {{> LOGIC_MEMBER_NAME}}.executeAsync(request)
    }
    {{/each}}
}
